/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generator.py" and edit the "all_ways_of_finding_to_string" function there.
 * -----------------------------------------------------------------------------
 */

namespace internal {

template<typename T>
concept UseStd = requires(T value)
{
    {std::to_string(value)};
};

template<typename T>
concept UseAdl = requires(T value)
{
    {to_string(value)};
};

template<typename T>
concept UseMethod = requires(T value)
{
    {value.to_string()};
};

template<typename T>
concept OptionalLike = requires(T value)
{
    {value ? "Some: " + Cool::stringify(*value) : "None"};
};

} // namespace internal


template<internal::UseStd T>
auto stringify(const T& value) -> std::string
{
    return std::to_string(value);
}

template<internal::UseAdl T>
auto stringify(const T& value) -> std::string
{
    return to_string(value);
}

template<internal::UseMethod T>
auto stringify(const T& value) -> std::string
{
    return value.to_string();
}

template<internal::OptionalLike T>
auto stringify(const T& value) -> std::string
{
    return value ? "Some: " + Cool::stringify(*value) : "None";
}


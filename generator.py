# ---HOW TO---
# Modify `ways_of_finding_to_string()`, then run this script.
# ------------


def ways_of_finding_to_string():
    return [
        ["UseStd", "std::to_string(value)"],
        ["UseAdl", "to_string(value)"],
    ]


def clear_generated_folder():
    import shutil
    import os
    shutil.rmtree(output_folder())
    os.makedirs(output_folder())


def output_folder():
    import os
    from pathlib import Path
    root_folder = Path(__file__).parent
    return os.path.join(root_folder, "generated")


def generate(name):
    generate_file(name, eval(f"{name}()"))


def generate_file(name, content):
    import os
    with open(os.path.join(output_folder(), name) + ".inl", 'w') as f:
        f.write(heading(name) + content)


def heading(function_name):
    import os
    return f"""/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "{os.path.basename(__file__)}" and edit the "{function_name}" function there.
 * -----------------------------------------------------------------------------
 */
"""


def all_ways_of_finding_to_string():
    concepts = ""
    implementations = ""
    for [concept_name, implementation] in ways_of_finding_to_string():
        concepts += f"""
template<typename T>
concept {concept_name} = requires(T value)
{{
    {implementation};
}};
"""
        implementations += f"""
template<internal::{concept_name} T>
auto stringify(const T& value) -> std::string
{{
    return {implementation};
}}
"""
    return f"""
namespace internal {{
{concepts}
}} // namespace internal

{implementations}
"""


clear_generated_folder()
generate("all_ways_of_finding_to_string")
